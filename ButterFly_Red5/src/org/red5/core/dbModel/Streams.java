package org.red5.core.dbModel;
// default package
// Generated Mar 29, 2014 3:32:38 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.Hibernate;

/**
 * Streams generated by hbm2java
 */
@Entity
@Table(name = "streams")
public class Streams implements java.io.Serializable {

	private Integer id;
	private Double altitude;
	private Boolean isLive;
	private Boolean isPublic;
	private Double latitude;
	private Double longitude;
	private Date registerTime;
	private String streamName;
	private String streamUrl;
	private GcmUsers gcmUsers;
	private Set<StreamViewers> streamViewerses = new HashSet<StreamViewers>(0);

	public Streams() {
	}

	public Streams(GcmUsers gcmUsers, Date registerTime,
			String streamName, String streamUrl) {
		this.gcmUsers = gcmUsers;
		this.registerTime = registerTime;
		this.streamName = streamName;
		this.streamUrl = streamUrl;
	}

	public Streams(Double altitude, GcmUsers gcmUsers, Boolean isLive,
			Boolean isPublic, Double latitude, Double longitude,
			Date registerTime, String streamName, String streamUrl,
			Set<StreamViewers> streamViewerses) {
		this.altitude = altitude;
		this.gcmUsers = gcmUsers;
		this.isLive = isLive;
		this.isPublic = isPublic;
		this.latitude = latitude;
		this.longitude = longitude;
		this.registerTime = registerTime;
		this.streamName = streamName;
		this.streamUrl = streamUrl;
		this.streamViewerses = streamViewerses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "altitude", precision = 22, scale = 0)
	public Double getAltitude() {
		return this.altitude;
	}

	public void setAltitude(Double altitude) {
		this.altitude = altitude;
	}

	@Column(name = "isLive")
	public Boolean getIsLive() {
		return this.isLive;
	}

	public void setIsLive(Boolean isLive) {
		this.isLive = isLive;
	}

	@Column(name = "isPublic")
	public Boolean getIsPublic() {
		return this.isPublic;
	}

	public void setIsPublic(Boolean isPublic) {
		this.isPublic = isPublic;
	}

	@Column(name = "latitude", precision = 22, scale = 0)
	public Double getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	@Column(name = "longitude", precision = 22, scale = 0)
	public Double getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "registerTime", nullable = false, length = 19)
	public Date getRegisterTime() {
		return this.registerTime;
	}

	public void setRegisterTime(Date registerTime) {
		this.registerTime = registerTime;
	}

	@Column(name = "streamName", nullable = false)
	public String getStreamName() {
		return this.streamName;
	}

	public void setStreamName(String streamName) {
		this.streamName = streamName;
	}

	@Column(name = "streamUrl", nullable = false)
	public String getStreamUrl() {
		return this.streamUrl;
	}

	public void setStreamUrl(String streamUrl) {
		this.streamUrl = streamUrl;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "streams")
	public Set<StreamViewers> getStreamViewerses() {
		return this.streamViewerses;
	}

	public void setStreamViewerses(Set<StreamViewers> streamViewerses) {
		this.streamViewerses = streamViewerses;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public GcmUsers getGcmUsers() {
		return gcmUsers;
	}

	public void setGcmUsers(GcmUsers gcmUsers) {
		this.gcmUsers = gcmUsers;
	}
	
	public boolean isDeletable(List<String> mailList)
	{		
		if(mailList == null)
			return false;
		
		Set<GcmUserMails> mails = this.gcmUsers.getGcmUserMailses();
		for (GcmUserMails gcmUserMails : mails) {
			
			for (String mailItem : mailList) {
				
				if(gcmUserMails.getMail().equals(mailItem))
				{
					return true;
				}
				
			}
		}
		
		return false;
	}

}
